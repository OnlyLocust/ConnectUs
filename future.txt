now fetch only first 5 posts and then scroll to botom. then fetch next 5posts... please

and also i can do that chats , explore do not show left sidebar okayy......


"use client";

import React, { useEffect, useRef, useState } from "react";
import PostCard from "../common/PostCard";
import { API_URL } from "@/constants/constant";
import { toast } from "sonner";
import { useDispatch, useSelector } from "react-redux";
import { setPosts } from "@/store/postSlice";
import axios from "axios";
import Loading from "../pages/Loading";

const Main = () => {
  const dispatch = useDispatch();
  const posts = useSelector((state) => state.posts.posts);
  const [loading, setLoading] = useState(false);
  const [skip, setSkip] = useState(0);
  const [hasMore, setHasMore] = useState(true);

  const observerRef = useRef(null);

  const fetchPosts = async () => {
    if (loading || !hasMore) return;
    setLoading(true);
    try {
      const res = await axios.get(`${API_URL}/post?skip=${skip}&limit=4`, {
        withCredentials: true,
        headers: {
          userId: localStorage.getItem('userId'),
        }
      });

      const newPosts = res.data.posts || [];

      if (res.data.success) {
        if (newPosts.length < 4) setHasMore(false); // No more posts
        dispatch(setPosts([...posts, ...newPosts]));
        setSkip(skip + 4); // update for next batch
        localStorage.setItem('skip', skip + 4);
      } else {
        throw new Error(res.data.message || "Failed to fetch posts");
      }
    } catch (error) {
      toast.error(
        error.response?.data?.message ||
        error.message ||
        "Failed to fetch posts"
      );
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // Reset local skip value when component first loads
    localStorage.setItem("skip", "0");
    setSkip(0);
    dispatch(setPosts([])); // reset old posts
    fetchPosts();
  }, []);

  // Intersection Observer for infinite scroll
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && hasMore && !loading) {
          fetchPosts();
        }
      },
      {
        threshold: 1,
      }
    );

    if (observerRef.current) {
      observer.observe(observerRef.current);
    }

    return () => {
      if (observerRef.current) {
        observer.unobserve(observerRef.current);
      }
    };
  }, [observerRef.current, loading, hasMore]);

  return (
    <main className="flex-1 max-w-[600px] mx-auto px-4 py-6 h-screen overflow-y-auto hide-scrollbar">
      {/* Posts */}
      <div className="flex flex-col gap-6">
        {posts.length > 0 ? (
          posts.map((post, i) => <PostCard key={i} post={post} type="all" />)
        ) : (
          <Loading />
        )}
      </div>

      {/* Observer element */}
      <div ref={observerRef} className="h-10 mt-4 flex items-center justify-center">
        {loading && <span className="text-gray-500">Loading more posts...</span>}
        {!hasMore && <span className="text-gray-400">No more posts</span>}
      </div>
    </main>
  );
};

export default Main;
